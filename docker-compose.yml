version: '3.5'

services:
  backend:
    container_name: bhut_backend
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - '0.0.0.0:3000:3000'
    networks:
      - bhut
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
  consumer:
    container_name: bhut_consumer
    build:
      context: .
      dockerfile: Dockerfile
    command: npm run start:consumer
    env_file:
      - .env
    networks:
      - bhut
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
  mongodb:
    container_name: bhut_mongodb
    image: mongo:7
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 30s
      retries: 3
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: bhut
    volumes:
      - db:/data/db
      - configdb:/data/configdb
    networks:
      - bhut
  rabbitmq:
    container_name: bhut_rabbitmq
    hostname: rabbitmq
    image: rabbitmq:3.13
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 30s
      retries: 3
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    networks:
      - bhut
  redis:
    container_name: bhut_redis
    image: valkey/valkey:alpine
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 5s
      timeout: 30s
      retries: 3
    networks:
      - bhut
volumes:
  rabbitmq:
  db:
  configdb:
networks:
  bhut:
    driver: bridge
